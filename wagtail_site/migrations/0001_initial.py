# Generated by Django 5.1.5 on 2025-03-18 15:02

import django.db.models.deletion
import modelcluster.fields
import uuid
import wagtail.contrib.forms.models
import wagtail.fields
import wagtail.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtail_site.formfield')),
                ('form', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='wagtail_site.pageform')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('footer_text', wagtail.fields.RichTextField()),
                ('linkedin', models.URLField(blank=True, verbose_name='LinkedIn URL')),
                ('github', models.URLField(blank=True, verbose_name='GitHub URL')),
                ('discord', models.URLField(blank=True, verbose_name='Discord URL')),
                ('twitter', models.URLField(blank=True, verbose_name='Twitter URL')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('address', wagtail.fields.RichTextField(blank=True, max_length=250, null=True)),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('logo_landscape', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebPageBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(blank=True, max_length=250, null=True)),
                ('caption_size', models.CharField(blank=True, choices=[('', 'Size'), ('h1', 'Header 1'), ('h2', 'Header 2'), ('h3', 'Header 3'), ('h4', 'Header 4'), ('h5', 'Header 5')], default='h1', max_length=5, null=True, verbose_name='Size')),
                ('caption_position', models.CharField(blank=True, choices=[('lft', 'Left'), ('top', 'Top'), ('rt', 'Right'), ('btm', 'Bottom'), ('ctr', 'Center'), ('tpl', 'Top Left'), ('tpr', 'Top Right'), ('btl', 'Bottom Left'), ('btr', 'Bottom Right')], default='btl', max_length=5, null=True, verbose_name='Position')),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.image')),
            ],
        ),
        migrations.CreateModel(
            name='WebPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intro', wagtail.fields.RichTextField(blank=True, null=True)),
                ('body', wagtail.fields.StreamField([('body', 9)], blank=True, block_lookup={0: ('wagtail.blocks.TextBlock', (), {'required': False}), 1: ('wagtail.blocks.CharBlock', (), {'form_classname': 'title'}), 2: ('wagtail.blocks.CharBlock', (), {'required': False}), 3: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('', 'Size'), ('h1', 'Header 1'), ('h2', 'Header 2'), ('h3', 'Header 3'), ('h4', 'Header 4'), ('h5', 'Header 5')]}), 4: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('lft', 'Left'), ('top', 'Top'), ('rt', 'Right'), ('btm', 'Bottom'), ('ctr', 'Center'), ('tpl', 'Top Left'), ('tpr', 'Top Right'), ('btl', 'Bottom Left'), ('btr', 'Bottom Right')]}), 5: ('wagtail.blocks.StructBlock', [[('title', 1), ('subtitle', 2), ('size', 3), ('position', 4)]], {'required': False}), 6: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 7: ('wagtail.images.blocks.ImageBlock', [], {}), 8: ('wagtail.blocks.StructBlock', [[('image', 7), ('caption', 2), ('attribution', 2)]], {'required': False}), 9: ('wagtail.blocks.StructBlock', [[('icon', 0), ('heading', 5), ('content', 6), ('image', 8), ('alignment', 4)]], {})})),
                ('banner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtail_site.webpagebanner', verbose_name='Banner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FooterText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('live', models.BooleanField(default=True, editable=False, verbose_name='live')),
                ('has_unpublished_changes', models.BooleanField(default=False, editable=False, verbose_name='has unpublished changes')),
                ('first_published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='first published at')),
                ('last_published_at', models.DateTimeField(editable=False, null=True, verbose_name='last published at')),
                ('go_live_at', models.DateTimeField(blank=True, null=True, verbose_name='go live date/time')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time')),
                ('expired', models.BooleanField(default=False, editable=False, verbose_name='expired')),
                ('body', wagtail.fields.RichTextField()),
                ('latest_revision', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='latest revision')),
                ('live_revision', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='live revision')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale', verbose_name='locale')),
            ],
            options={
                'verbose_name_plural': 'Footer Text',
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.models.PreviewableMixin, models.Model),
        ),
    ]
